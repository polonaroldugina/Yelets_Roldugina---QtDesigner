# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import random
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from random import randint
import csv
import main
import sqlite3
import sys
import os

facts =  ["<html><head/><body><p align=\"left\"><span style=\" font-size:20pt;\"> В Великобритании есть удивительная профессия — стояльщик в очереди.</span></p><p align=\"left\"><span style=\" font-size:20pt;\"> Стоимость часа работы такого специалиста обходится</span></p><p align=\"left\"><span style=\" font-size:20pt;\"> клиенту в двадцать фунтов.</span></p></body></html>", 
"<html><head/><body><p align=\"left\"><span style=\"font-size:20pt;\"> Слесарь, конечно, ассоциируется с сантехникой. Но в переводе с немецкого</span></p><p align=\"left\"><span style=\" font-size:20pt;\"> это слово означает «замочник». Вследствие голосовой ассимиляции</span></p><p align=\"left\"><span style=\" font-size:20pt;\"> при совпадении двух согласных букв в начале слова немецкое </span></p><p align=\"left\"><span style=\" font-size:20pt;\">«шлесарь» плавно перетекло в русское «слесарь».</span></p></body></html>",
"Летчики стараются не фотографироваться до вылета.","В мире насчитывается около 70 тысяч разнообразных профессий."]

IMG_BOMB = QImage("./images/bug.png")
IMG_FLAG = QImage("./images/flag.png")
IMG_START = QImage("./images/rocket.png")
IMG_CLOCK = QImage("./images/clock-select.png")

NUM_COLORS = {
    1: QColor('#f44336'),
    2: QColor('#9C27B0'),
    3: QColor('#3F51B5'),
    4: QColor('#03A9F4'),
    5: QColor('#00BCD4'),
    6: QColor('#4CAF50'),
    7: QColor('#E91E63'),
    8: QColor('#FF9800')
}

LEVELS = [
    (8, 10),
    (16, 40),
    (24, 99)
]

STATUS_READY = 0
STATUS_PLAYING = 1
STATUS_FAILED = 2
STATUS_SUCCESS = 3

STATUS_ICONS = {
    STATUS_READY: "./images/plus.png",
    STATUS_PLAYING: "./images/smiley.png",
    STATUS_FAILED: "./images/cross.png",
    STATUS_SUCCESS: "./images/smiley-lol.png",
}


class Pos(QWidget):
    expandable = pyqtSignal(int, int)
    clicked = pyqtSignal()
    ohno = pyqtSignal()

    def __init__(self, x, y, *args, **kwargs):
        super(Pos, self).__init__(*args, **kwargs)

        self.setFixedSize(QSize(40, 40))

        self.x = x
        self.y = y

    def reset(self):
        self.is_start = False
        self.is_mine = False
        self.adjacent_n = 0

        self.is_revealed = False
        self.is_flagged = False

        self.update()

    def paintEvent(self, event):
        p = QPainter(self)
        p.setRenderHint(QPainter.Antialiasing)

        r = event.rect()

        if self.is_revealed:
            color = self.palette().color(QPalette.Background)
            outer, inner = color, color
        else:
            outer, inner = Qt.gray, Qt.lightGray

        p.fillRect(r, QBrush(inner))
        pen = QPen(outer)
        pen.setWidth(1)
        p.setPen(pen)
        p.drawRect(r)

        if self.is_revealed:
            if self.is_start:
                p.drawPixmap(r, QPixmap(IMG_START))

            elif self.is_mine:
                p.drawPixmap(r, QPixmap(IMG_BOMB))

            elif self.adjacent_n > 0:
                pen = QPen(NUM_COLORS[self.adjacent_n])
                p.setPen(pen)
                f = p.font()
                f.setBold(True)
                p.setFont(f)
                p.drawText(r, Qt.AlignHCenter | Qt.AlignVCenter, str(self.adjacent_n))

        elif self.is_flagged:
            p.drawPixmap(r, QPixmap(IMG_FLAG))

    def flag(self):
        self.is_flagged = True
        self.update()

        self.clicked.emit()

    def reveal(self):
        self.is_revealed = True
        self.update()

    def click(self):
        if not self.is_revealed:
            self.reveal()
            if self.adjacent_n == 0:
                self.expandable.emit(self.x, self.y)

        self.clicked.emit()

    def mouseReleaseEvent(self, e):

        if (e.button() == Qt.RightButton and not self.is_revealed):
            self.flag()

        elif (e.button() == Qt.LeftButton):
            self.click()

            if self.is_mine:
                self.ohno.emit()


class MainWindow1(QMainWindow):
    def __init__(self, *args, **kwargs):
        super(MainWindow1, self).__init__(*args, **kwargs)

        self.b_size, self.n_mines = LEVELS[1]
        self.setStyleSheet("background-color: rgba(255, 255, 127, 255);")
        self.setWindowTitle('Профессиональный сапер')
        w = QWidget()
        hb = QHBoxLayout()

        self.mines = QLabel()
        self.mines.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)

        self.clock = QLabel()
        self.clock.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)

        f = self.mines.font()
        f.setPointSize(24)
        f.setWeight(75)
        self.mines.setFont(f)
        self.clock.setFont(f)

        self._timer = QTimer()
        self._timer.timeout.connect(self.update_timer)
        self._timer.start(1000)  # 1 таймер

        self.mines.setText("%03d" % self.n_mines)
        self.clock.setText("000")

        self.button = QPushButton()
        self.button.setFixedSize(QSize(40, 40))
        self.button.setIconSize(QSize(40, 40))
        self.button.setIcon(QIcon("./images/smiley.png"))
        self.button.setFlat(True)

        self.button.pressed.connect(self.button_pressed)

        l = QLabel()
        l.setPixmap(QPixmap.fromImage(IMG_BOMB))
        l.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        hb.addWidget(l)

        hb.addWidget(self.mines)
        hb.addWidget(self.button)
        hb.addWidget(self.clock)

        l = QLabel()
        l.setPixmap(QPixmap.fromImage(IMG_CLOCK))
        l.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        hb.addWidget(l)

        vb = QVBoxLayout()
        vb.addLayout(hb)

        self.grid = QGridLayout()
        self.grid.setSpacing(5)

        vb.addLayout(self.grid)
        w.setLayout(vb)
        self.setCentralWidget(w)

        self.init_map()
        self.update_status(STATUS_READY)

        self.reset_map()
        self.update_status(STATUS_READY)

        self.show()

    def init_map(self):
        # добавим позицию на карту
        for x in range(0, self.b_size):
            for y in range(0, self.b_size):
                w = Pos(x, y)
                self.grid.addWidget(w, y, x)
                # свяжем
                w.clicked.connect(self.trigger_start)
                w.expandable.connect(self.expand_reveal)
                w.ohno.connect(self.game_over)

    def reset_map(self):
        # чистим все позиции
        for x in range(0, self.b_size):
            for y in range(0, self.b_size):
                w = self.grid.itemAtPosition(y, x).widget()
                w.reset()

        # добавляем провалы
        positions = []
        while len(positions) < self.n_mines:
            x, y = random.randint(0, self.b_size - 1), random.randint(0, self.b_size - 1)
            if (x, y) not in positions:
                w = self.grid.itemAtPosition(y, x).widget()
                w.is_mine = True
                positions.append((x, y))

        def get_adjacency_n(x, y):
            positions = self.get_surrounding(x, y)
            n_mines = sum(1 if w.is_mine else 0 for w in positions)

            return n_mines

        for x in range(0, self.b_size):
            for y in range(0, self.b_size):
                w = self.grid.itemAtPosition(y, x).widget()
                w.adjacent_n = get_adjacency_n(x, y)


        while True:
            x, y = random.randint(0, self.b_size - 1), random.randint(0, self.b_size - 1)
            w = self.grid.itemAtPosition(y, x).widget()
            if (x, y) not in positions:
                w = self.grid.itemAtPosition(y, x).widget()
                w.is_start = True


                for w in self.get_surrounding(x, y):
                    if not w.is_mine:
                        w.click()
                break

    def get_surrounding(self, x, y):
        positions = []

        for xi in range(max(0, x - 1), min(x + 2, self.b_size)):
            for yi in range(max(0, y - 1), min(y + 2, self.b_size)):
                positions.append(self.grid.itemAtPosition(yi, xi).widget())

        return positions

    def button_pressed(self):
        if self.status == STATUS_PLAYING:
            self.update_status(STATUS_FAILED)
            self.reveal_map()

        elif self.status == STATUS_FAILED:
            self.update_status(STATUS_READY)
            self.reset_map()

    def reveal_map(self):
        for x in range(0, self.b_size):
            for y in range(0, self.b_size):
                w = self.grid.itemAtPosition(y, x).widget()
                w.reveal()

    def expand_reveal(self, x, y):
        for xi in range(max(0, x - 1), min(x + 2, self.b_size)):
            for yi in range(max(0, y - 1), min(y + 2, self.b_size)):
                w = self.grid.itemAtPosition(yi, xi).widget()
                if not w.is_mine:
                    w.click()

    def trigger_start(self, *args):
        if self.status != STATUS_PLAYING:
            self.update_status(STATUS_PLAYING)
            # старт таймера
            self._timer_start_nsecs = int(time.time())

    def update_status(self, status):
        self.status = status
        self.button.setIcon(QIcon(STATUS_ICONS[self.status]))

    def update_timer(self):
        if self.status == STATUS_PLAYING:
            n_secs = int(time.time()) - self._timer_start_nsecs
            self.clock.setText("%03d" % n_secs)

    def game_over(self):
        self.reveal_map()
        self.update_status(STATUS_FAILED)
        
class Example(QWidget):
    
    btns = []
    
    def __init__(self):
        super().__init__()
        self.s = 0
        self.initUI()

    def initUI(self):
        self.setGeometry(10, 50, 1000, 500)
        self.setWindowTitle('Алфавитный указатель')
        self.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 127, 255), stop:0.651741 rgba(232, 255, 232, 255));")
        self.stat = QStatusBar(self)
        self.stat.resize(980, 20)
        self.stat.move(10, 470)

        self.layout = QHBoxLayout()

        ltrs = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
        for i in range(len(ltrs)):
            self.btns.append(QPushButton(self))
            self.btns[i].setText(ltrs[i].upper())
            self.btns[i].resize(20, 20)
            self.btns[i].move((i + 1) * 10 + 20 * i, 10)
            self.layout.addWidget(self.btns[i])
            self.btns[i].clicked.connect(self.pressed_ltr)

        self.table = QTableWidget(self)
        self.table.move(10, 50)
        self.table.resize(980, 410)
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(['ID', 'Сфера', 'Профессия',
                                                    'Средняя ЗП'])
        self.table.setRowCount(0)
        self.fill_table()

    def pressed_ltr(self):
        a = self.sender().text()
        self.fill_table(a)

    def fill_table(self, ltr=''):
        with sqlite3.connect('prof.db') as con:
            cur = con.cursor()
            res = cur.execute(f"""SELECT * FROM Проф WHERE Профессия like '{ltr}%'""").fetchall()
            self.table.setRowCount(len(res))
            for i, row in enumerate(res):
                for j, elem in enumerate(row):
                    self.table.setItem(
                        i, j, QTableWidgetItem(str(elem)))
            self.table.resizeColumnsToContents()
            if len(res) > 0:
                self.stat.showMessage(f'Нашлось {len(res)} результатов')
            else:
                self.stat.showMessage('К сожалению, ничего не нашлось')

class Window2(QWidget):

    def __init__(self):
        super(Window2, self).__init__()
        self.setWindowTitle('Тест - Твоя профессия')
        self.setMinimumWidth(625)
        self.setMinimumHeight(600)
        self.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 127, 255), stop:0.651741 rgba(232, 255, 232, 255));")
        self.initUI()

        
    def initUI(self):
        self.pushButton1 = QtWidgets.QPushButton(self)
        self.pushButton1.setGeometry(QtCore.QRect(20, 20, 200, 100))
        self.pushButton1.setStyleSheet("font: 75 22pt \"MS Shell Dlg 2\";")
        self.pushButton1.setObjectName("pushButton1")
        self.pushButton1.setText("Результат")
        self.pushButton1.clicked.connect(self.text)
        self.line1 = QtWidgets.QFrame(self)
        self.line1.setGeometry(QtCore.QRect(0, 126, 625, 21))
        self.line1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line1.setObjectName("line1")
        self.line12 = QtWidgets.QFrame(self)
        self.line12.setGeometry(QtCore.QRect(0, 211, 625, 21))
        self.line12.setFrameShape(QtWidgets.QFrame.HLine)
        self.line12.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line12.setObjectName("line12")
        self.line13 = QtWidgets.QFrame(self)
        self.line13.setGeometry(QtCore.QRect(0, 300, 625, 21))
        self.line13.setFrameShape(QtWidgets.QFrame.HLine)
        self.line13.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line13.setObjectName("line13")
        self.line14 = QtWidgets.QFrame(self)
        self.line14.setGeometry(QtCore.QRect(0, 400, 625, 21))
        self.line14.setFrameShape(QtWidgets.QFrame.HLine)
        self.line14.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line14.setObjectName("line13")
        self.label1 = QtWidgets.QLabel(self)
        self.label1.setGeometry(QtCore.QRect(450, 40, 155, 33))
        self.label1.setObjectName("label1")
        self.label1.setStyleSheet("font: 75 15pt \"MS Shell Dlg 2\";")
        self.label1_2 = QtWidgets.QLabel(self)
        self.label1_2.setGeometry(QtCore.QRect(240, 155, 375, 33))
        self.label1_2.setObjectName("label1_2")
        self.label1_2.setStyleSheet("font: 75 11pt \"MS Shell Dlg 2\";")
        self.label1_3 = QtWidgets.QLabel(self)
        self.label1_3.setGeometry(QtCore.QRect(250, 255, 375, 33))
        self.label1_3.setObjectName("label1_3")
        self.label1_3.setStyleSheet("font: 75 11pt \"MS Shell Dlg 2\";")
        self.label1_4 = QtWidgets.QLabel(self)
        self.label1_4.setGeometry(QtCore.QRect(250, 340, 375, 33))
        self.label1_4.setObjectName("label1_3")
        self.label1_4.setStyleSheet("font: 75 11pt \"MS Shell Dlg 2\";")
        self.lineEdit1 = QtWidgets.QLineEdit(self)
        self.lineEdit1.setGeometry(QtCore.QRect(260, 40, 155, 33))
        self.lineEdit1.setObjectName("lineEdit1")
        self.label1_2.setText("Сфера, в которой ты хочешь развиваться")
        self.label1_3.setText("Хочешь ли ты работать с людьми?")
        self.label1_4.setText("Работать одному или в команде?")
        self.label1.setText("Твое имя")
        self.comboBox = QtWidgets.QComboBox(self)
        self.comboBox.setGeometry(QtCore.QRect(20, 155, 171, 33))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("IT")
        self.comboBox.addItem("Медицина")
        self.comboBox.addItem("Экономика")
        self.comboBox.addItem("Прикладные профессии")
        self.comboBox.addItem("Общество")
        self.comboBox1 = QtWidgets.QComboBox(self)
        self.comboBox1.setGeometry(QtCore.QRect(20, 255, 171, 33))
        self.comboBox1.setObjectName("comboBox1")
        self.comboBox1.addItem("Да")
        self.comboBox1.addItem("Нет")
        self.comboBox2 = QtWidgets.QComboBox(self)
        self.comboBox2.setGeometry(QtCore.QRect(20, 340, 171, 33))
        self.comboBox2.setObjectName("comboBox1")
        self.comboBox2.addItem("Один")
        self.comboBox2.addItem("Команда")
        self.textEdit = QtWidgets.QTextEdit(self)
        self.textEdit.setGeometry(QtCore.QRect(20, 430, 585, 120))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setStyleSheet("font: 75 22pt \"MS Shell Dlg 2\";")

    def text(self):
        self.name = str(self.lineEdit1.text())
        self.sp = self.comboBox.currentText()
        self.ans1 = self.comboBox1.currentText()
        self.ans2 = self.comboBox2.currentText()
        s1 = 'Привет, ' + self.name + '! '
        if self.ans1 == 'Да' and self.ans2 == 'Команда':
            a = 0
        elif self.ans1 == 'Да' and self.ans2 == 'Один':
            a = 1
        elif self.ans1 == 'Нет' and self.ans2 == 'Один':
            a = 2
        elif self.ans1 == 'Нет' and self.ans2 == 'Команда':
            a = 3
        s2 = 'Твоя идеальная профессия - '
        pr = []
        if self.sp == "IT":
            pr.append(['Ведущий разработчик Python / TeamLead', 'Линк-менеджер', 'Специалист по игровому арту', 'Специалист по информационной безопасности'])
        elif self.sp == "Медицина":
            pr.append(['Врач', 'Рентгенолог', 'Генетик', 'Фармацефт'])
        elif self.sp == "Экономика":
            pr.append(['анковский служащий', 'Страховой агент', 'Специалист по валютным операциям', 'Агент по снабжению'])
        elif self.sp == "Прикладные профессии":
            pr.append(['Чистильщик', 'Раскройщик', 'Ювелир', 'Аэростатчик'])
        else:
            pr.append(['Постановщик трюков', 'Психолог', 'Частный детектив', 'Агент по защите домашних животных'])
        an = pr[0][a]
        s2 = s2 + an
        self.s1 = s1 + s2
        self.textEdit.setText(self.s1)

class Window1(QWidget):
    
    def __init__(self):
        super(Window1, self).__init__()
        self.setWindowTitle('Случайный факт')
        self.setMinimumWidth(1500)
        self.setMinimumHeight(500)
        self.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 127, 255), stop:0.651741 rgba(232, 255, 232, 255));")
        self.initUI()

    def initUI(self):
        self.label1 = QLabel(self)
        a = randint(0, len(facts)-1)
        self.label1.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.532, y1:0.482955, x2:1, y2:0, stop:0 rgba(0, 0, 0, 0), stop:1 rgba(255, 255, 255, 0));\n"
"font: 15pt \"Segoe Script\";")
        self.label1.setText(facts[a])
        self.label1.move(0, 0)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("ProМаршрут")
        MainWindow.resize(1120, 838)
        MainWindow.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 127, 255), stop:0.651741 rgba(232, 255, 232, 255));")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget.setGeometry(QtCore.QRect(0, 570, 441, 241))
        self.calendarWidget.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"gridline-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(170, 255, 255);\n"
"gridline-color: rgb(85, 255, 255);")
        self.calendarWidget.setObjectName("calendarWidget")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 550, 1131, 21))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(440, 560, 20, 251))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1121, 111))
        self.label.setStyleSheet("font: 60pt \"ShellyAllegroC\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(460, 670, 341, 51))
        self.label_2.setStyleSheet("font: 75 14pt \"System\";\n"
"")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(460, 710, 241, 101))
        self.label_3.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.532, y1:0.482955, x2:1, y2:0, stop:0 rgba(0, 0, 0, 0), stop:1 rgba(255, 255, 255, 0));\n"
"font: 75 14pt \"System\";")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(750, 660, 361, 161))
        self.label_4.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.532, y1:0.482955, x2:1, y2:0, stop:0 rgba(0, 0, 0, 0), stop:1 rgba(255, 255, 255, 0));\n"
"font: 75 12pt \"MS Shell Dlg 2\";")
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(40, 450, 441, 71))
        self.pushButton.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.random)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 350, 441, 71))
        self.pushButton_2.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.alf)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(40, 250, 441, 71))
        self.pushButton_3.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.kino)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(40, 150, 441, 71))
        self.pushButton_4.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.test)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(500, 160, 621, 51))
        self.label_6.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.532, y1:0.482955, x2:1, y2:0, stop:0 rgba(0, 0, 0, 0), stop:1 rgba(255, 255, 255, 0));\n"
"font: 75 22pt \"MS Shell Dlg 2\";")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(460, 570, 661, 91))
        self.label_7.setStyleSheet("font: 58pt \"ShellyAllegroC\";")
        self.label_7.setObjectName("label_7")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(0, 100, 1131, 21))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(110, 290, 301, 91))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(100, 390, 301, 91))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(110, 190, 301, 91))
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(600, 350, 441, 71))
        self.pushButton_5.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.mult)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(600, 250, 441, 71))
        self.pushButton_6.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.kvest)
        self.line_7 = QtWidgets.QFrame(self.centralwidget)
        self.line_7.setGeometry(QtCore.QRect(680, 290, 301, 91))
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(510, 450, 621, 51))
        self.label_8.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0.532, y1:0.482955, x2:1, y2:0, stop:0 rgba(0, 0, 0, 0), stop:1 rgba(255, 255, 255, 0));\n"
"font: 75 22pt \"MS Shell Dlg 2\";")
        self.label_8.setObjectName("label_8")
        self.line_7.raise_()
        self.line_6.raise_()
        self.line_5.raise_()
        self.line_4.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.calendarWidget.raise_()
        self.line.raise_()
        self.label.raise_()
        self.line_2.raise_()
        self.label_4.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.label_6.raise_()
        self.line_3.raise_()
        self.label_7.raise_()
        self.pushButton_5.raise_()
        self.pushButton_6.raise_()
        self.label_8.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1120, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:48pt;\">ProМаршрут</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p>Разработчики IOS и Android</p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">Сфера IT</span></p><p><span style=\" font-size:12pt;\">Средняя зарплата 190 000Р</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:10pt;\">Специалист, который занимается </span></p><p align=\"right\"><span style=\" font-size:10pt;\">разработкой мобильных приложений </span></p><p align=\"right\"><span style=\" font-size:10pt;\">на две самые популярные </span></p><p align=\"right\"><span style=\" font-size:10pt;\">операционные системы</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Случайный факт о профессиях"))
        self.pushButton_2.setText(_translate("MainWindow", "Алфавитный указатель"))
        self.pushButton_3.setText(_translate("MainWindow", "Фильм о профессиях будущего"))
        self.pushButton_4.setText(_translate("MainWindow", "Тест по профессиям"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Выбирай, чем займемся сегодня!</p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:48pt;\">Профессия месяца</span></p></body></html>"))
        self.pushButton_5.setText(_translate("MainWindow", "Мультфильм \"\"Кем я хочу стать когда вырасту\" "))
        self.pushButton_6.setText(_translate("MainWindow", "Игра - ПрофСапер"))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Выбери свою дорогу!</p></body></html>"))

    def alf(self):
        self.w2 = Example()
        self.w2.show()

    def random(self):
        self.w1 = Window1()
        self.w1.show()
   
    def kino(self):
        os.startfile("фильм.mp4")

    def mult(self):
        os.startfile("мульт.mp4")

    def test(self):
        self.w2 = Window2()
        self.w2.show()

    def kvest(self):
        self.w2 = MainWindow1()
        self.w2.show()

class ExampleApp(QtWidgets.QMainWindow, main.Ui_MainWindow ):
    def __init__(self):
        # Это здесь нужно для доступа к переменным, методам
        # и т.д. в файле .py
        super().__init__()
        self.setupUi(self)  # Это нужно для инициализации дизайна


def main():
    app = QtWidgets.QApplication(sys.argv)  # Новый экземпляр QApplication
    window = ExampleApp()  # Создаём объект класса ExampleApp
    window.show()  # Показываем окно
    app.exec_()  # и запускаем приложение

if __name__ == '__main__':  # Если мы запускаем файл напрямую, а не импортируем
    main()  # то запускаем функцию main()
        
